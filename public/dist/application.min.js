"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean";return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule:function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role))return allowed=!0,!0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("scholorships")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),!(inputName=$interpolate(inputNgEl.attr("name")||"")(scope)))throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||void 0===options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||void 0===options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function routeConfig($stateProvider){$stateProvider.state("applications",{abstract:!0,url:"/applications",template:"<ui-view/>"}).state("applications.submitted",{url:"/tack",templateUrl:"modules/scholorships/client/views/submitted-application.client.view.html"}).state("applications.scholorlist",{url:"/scholorship/:scholorshipId",templateUrl:"modules/scholorships/client/views/list-applications.client.view.html",controller:"ApplicationsListController",controllerAs:"vm",data:{roles:["stipendiumansvarig","admin"],pageTitle:"Applications List"}}).state("applications.list",{url:"",templateUrl:"modules/scholorships/client/views/list-applications.client.view.html",controller:"ApplicationsListController",controllerAs:"vm",data:{roles:["stipendiumansvarig","admin"],pageTitle:"Applications List"}}).state("applications.attachments",{url:"/attachments/:applicationId/",templateUrl:"modules/scholorships/client/views/form-attachments.client.view.html",controller:"AttachmentsController",controllerAs:"vm",resolve:{applicationResolve:getApplication},data:{roles:["user","admin"],pageTitle:"Bilagor"}}).state("applications.create",{url:"/create/:scholorshipId/:scholorshipName",templateUrl:"modules/scholorships/client/views/form-application.client.view.html",controller:"ApplicationsController",controllerAs:"vm",resolve:{applicationResolve:newApplication,semestersjs:["$http",function($http){return $http({method:"GET",url:"/js/semesters.js"})}]},data:{roles:["user","admin"],pageTitle:"Ansök om stipendium"}}).state("applications.edit",{url:"/:applicationId/edit",templateUrl:"modules/scholorships/client/views/form-application.client.view.html",controller:"ApplicationsController",controllerAs:"vm",resolve:{applicationResolve:getApplication},data:{roles:["stipendiumansvarig","admin"],pageTitle:"Edit Application {{ applicationResolve.name }}"}}).state("applications.view",{url:"/:applicationId",templateUrl:"modules/scholorships/client/views/view-application.client.view.html",controller:"ApplicationsController",controllerAs:"vm",resolve:{applicationResolve:getApplication},data:{roles:["stipendiumansvarig","admin"],pageTitle:"Application {{ articleResolve.name }}"}})}function getApplication($stateParams,ApplicationsService){return ApplicationsService.get({applicationId:$stateParams.applicationId}).$promise}function newApplication(ApplicationsService){return new ApplicationsService}angular.module("scholorships").config(routeConfig),routeConfig.$inject=["$stateProvider"],getApplication.$inject=["$stateParams","ApplicationsService"],newApplication.$inject=["ApplicationsService"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Stipendium",state:"scholorships",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","scholorships",{title:"Utlysta stipendier",state:"scholorships.list"}),Menus.addSubMenuItem("topbar","scholorships",{title:"Utlys Stipendium",state:"scholorships.create",roles:["stipendiumansvarig"]})}angular.module("scholorships").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("scholorships",{abstract:!0,url:"/scholorships",template:"<ui-view/>"}).state("scholorships.list",{url:"",templateUrl:"modules/scholorships/client/views/list-scholorships.client.view.html",controller:"ScholorshipsListController",controllerAs:"vm",data:{pageTitle:"Scholorships List"}}).state("scholorships.create",{url:"/create",templateUrl:"modules/scholorships/client/views/form-scholorship.client.view.html",controller:"ScholorshipsController",controllerAs:"vm",resolve:{scholorshipResolve:newScholorship},data:{roles:["user","admin"],pageTitle:"Scholorships Create"}}).state("scholorships.edit",{url:"/:scholorshipId/edit",templateUrl:"modules/scholorships/client/views/form-scholorship.client.view.html",controller:"ScholorshipsController",controllerAs:"vm",resolve:{scholorshipResolve:getScholorship},data:{roles:["user","admin"],pageTitle:"Edit Scholorship {{ scholorshipResolve.name }}"}}).state("scholorships.view",{url:"/:scholorshipId",templateUrl:"modules/scholorships/client/views/view-scholorship.client.view.html",controller:"ScholorshipsController",controllerAs:"vm",resolve:{scholorshipResolve:getScholorship},data:{pageTitle:"Scholorship {{ articleResolve.name }}"}})}function getScholorship($stateParams,ScholorshipsService){return ScholorshipsService.get({scholorshipId:$stateParams.scholorshipId}).$promise}function newScholorship(ScholorshipsService){return new ScholorshipsService}angular.module("scholorships").config(routeConfig),routeConfig.$inject=["$stateProvider"],getScholorship.$inject=["$stateParams","ScholorshipsService"],newScholorship.$inject=["ScholorshipsService"]}(),function(){function ApplicationsController($scope,$state,Authentication,application,$stateParams,Users,SemesterService){function fillSemesterArray(semesters){for(var thisSemester=SemesterService.getThisSemesterName();semesters.length>0&&semesters[0].name!==thisSemester;)SemesterService.addSemester(semesters,!0);SemesterService.getLastFourSemesters(semesters)}function remove(){confirm("Are you sure you want to delete?")&&vm.application.$remove($state.go("scholorships.list"))}function save(isValid){if(!isValid)return vm.error="Du skall fylla i alla fält.",$scope.$broadcast("show-errors-check-validity","applicationForm"),!1;$scope.updateModels(),$scope.isEditing?$scope.updateApplication():$scope.updateUserProfile(),$scope.successCallback=function(res){$scope.isEditing?$state.go("applications.scholorlist",{scholorshipId:res.scholorship}):$state.go("applications.attachments",{applicationId:res._id}),event.preventDefault()},$scope.errorCallback=function(res){vm.error=res.data.message}}var vm=this;if(vm.scholorshipId=$stateParams.scholorshipId,vm.authentication=Authentication,vm.application=application,vm.ladok_url="/uploads/ladok/"+vm.application._id+".pdf",$scope.isEditing=void 0===vm.scholorshipId&&vm.application._id,vm.scholorshipName=$scope.isEditing?vm.application.data.scholorshipName:$stateParams.scholorshipName,$scope.user=$scope.isEditing?vm.application.data:vm.authentication.user,vm.semesterStudied=vm.application.semesterStudied,vm.semesterNation=vm.application.semesterNation,vm.application.data&&(vm.allowance=vm.application.data.allowance),vm.error=null,vm.form={},vm.remove=remove,vm.save=save,$scope.updateUserProfile=function(){$scope.success=$scope.error=null,$scope.user.assignments.forEach(function(v){delete v.edit}),$scope.user.earlierScholorships.forEach(function(v){delete v.edit}),$scope.user.interruption.forEach(function(v){delete v.edit});var myUser=new Users($scope.user);console.log(myUser),myUser.$update(function(response){$scope.$broadcast("show-errors-reset","applicationForm"),$scope.success=!0,Authentication.user=response,$scope.user=response,$scope.updateApplication()},function(response){$scope.error=response.data.message})},$scope.updateAllowance=function(){$scope.updateApplication(),$scope.editAllowance=!1},$scope.updateApplication=function(){vm.application.user=vm.authentication.user._id,vm.application.scholorship=vm.scholorshipId,vm.application.semesterStudied=vm.semesterStudied,vm.application.semesterNation=vm.semesterNation,$scope.user.universitypoints.semesters=$scope.user.universitypoints.semesters.filter(function(semester){return 0!==semester.points}),$scope.user.assignments.forEach(function(v){delete v.edit}),$scope.user.earlierScholorships.forEach(function(v){delete v.edit}),$scope.user.interruption.forEach(function(v){delete v.edit}),vm.application.data={displayName:$scope.user.displayName,personNumber:$scope.user.personNumber,telephone:$scope.user.telephone,streetaddress:$scope.user.street,zipCode:$scope.user.zipCode,city:$scope.user.city,highschool:$scope.user.highschool,bank:$scope.user.bank,bankaccount:$scope.user.bankaccount,union:$scope.user.union,scholorshipName:vm.scholorshipName,universitypoints:$scope.user.universitypoints,assignments:$scope.user.assignments,earlierScholorships:$scope.user.earlierScholorships,interruption:$scope.user.interruption,allowance:vm.allowance},vm.application.$save($scope.successCallback,$scope.errorCallback)},$scope.addAssignment=function(assignments){assignments.push({assignmenttype:"",name:"",semester:"",edit:!0})},$scope.addEarlierScholorship=function(earlierScholorships){earlierScholorships.push({name:"",semester:"",money:0,edit:!0})},$scope.addInterruption=function(interruptions){interruptions.push({when:"",why:"",edit:!0})},$scope.saveAssignment=function(index,valid){valid?($scope.user.assignments[index].edit=!1,$scope.assignmenterror=""):$scope.assignmenterror="Vänligen fyll i alla kolumner."},$scope.saveEarly=function(index,valid){valid?($scope.user.earlierScholorships[index].edit=!1,$scope.earlyScholorshiperror=""):$scope.earlyScholorshiperror="Vänligen fyll i alla kolumner."},$scope.saveInterruption=function(index,valid){valid?($scope.user.interruption[index].edit=!1,$scope.interruptionerror=""):$scope.interruptionerror="Vänligen fyll i alla kolumner."},$scope.deleteAssignment=function($index){$scope.user.assignments.splice($index,1)},$scope.deleteEarly=function($index){$scope.user.earlierScholorships.splice($index,1)},$scope.deleteInterruption=function($index){$scope.user.interruption.splice($index,1)},$scope.addSemester=function(semesters){SemesterService.addSemester(semesters,!1)},fillSemesterArray($scope.user.universitypoints.semesters),void 0===vm.scholorshipId&&void 0===vm.application._id)return $state.go("scholorships.list"),void event.preventDefault();$scope.personQuestions=[{name:"personnummer",question:"Personnr",placeholder:"XXXXXXX-XXXX",variable:$scope.user.personNumber},{name:"telephone",question:"Telefon",placeholder:"07XX-XX XX XX",variable:$scope.user.telephone},{name:"street",question:"Gatuadress",variable:$scope.user.streetaddress},{name:"zipcode",question:"Post nummer",variable:$scope.user.zipCode},{name:"city",question:"city",variable:$scope.user.city},{name:"highshool",question:"Gymnasium och ort",variable:$scope.user.highschool},{name:"bank",question:"Bank",variable:$scope.user.bank},{name:"bankaccount",question:"Bankkonto",variable:$scope.user.bankaccount},{name:"union",question:"Kår",variable:$scope.user.union}],$scope.updateModels=function(){$scope.user.personNumber=$scope.personQuestions[0].variable,$scope.user.telephone=$scope.personQuestions[1].variable,$scope.user.street=$scope.personQuestions[2].variable,$scope.user.zipCode=$scope.personQuestions[3].variable,$scope.user.city=$scope.personQuestions[4].variable,$scope.user.highschool=$scope.personQuestions[5].variable,$scope.user.bank=$scope.personQuestions[6].variable,$scope.user.bankaccount=$scope.personQuestions[7].variable,$scope.user.union=$scope.personQuestions[8].variable}}angular.module("scholorships").controller("ApplicationsController",ApplicationsController),ApplicationsController.$inject=["$scope","$state","Authentication","applicationResolve","$stateParams","Users","SemesterService"]}(),angular.module("users").controller("AttachmentsController",["$scope","$timeout","$window","Authentication","FileUploader","applicationResolve","$state",function($scope,$timeout,$window,Authentication,FileUploader,application,$state){var vm=this;$scope.user=Authentication.user,vm.application=application,$scope.imgUrlBase="public/uploads/",$scope.pdfURL=$scope.imgUrlBase+vm.application._id+".pdf",$scope.uploader=new FileUploader({url:"api/applications/ladok/"+vm.application._id,alias:"newLadokFile"}),$scope.uploader.filters.push({name:"pdfFilter",fn:function(item,options){return-1!=="|pdf|".indexOf("|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|")}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.pdfURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.cancelUpload(),$state.go("applications.submitted"),event.preventDefault()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadLadokFile=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.pdfURL=$scope.imgUrlBase+vm.application._id+".pdf"}}]),function(){function ApplicationsListController(ApplicationsService,SemesterService,$scope,$http,$stateParams,dateFilter){var vm=this;$scope.dateFilter=dateFilter,$scope.title="Laddar...",vm.scholorshipId=$stateParams.scholorshipId,vm.semesters=SemesterService.getLastFourSemesters([]),$scope.applications=ApplicationsService.query({scholorship:vm.scholorshipId},function(data){$scope.applications=data.filter(function(d){return d.scholorship===vm.scholorshipId&&d.complete}),$scope.scholorshipName=$scope.applications[0].data.scholorshipName,$scope.totalFunds=$scope.applications.reduce(function(prev,curr){return{data:{allowance:prev.data.allowance+curr.data.allowance}}}).data.allowance,$scope.applications.length>0?$scope.title="Stipendiumansökningar för "+$scope.scholorshipName:$scope.title="Inga ansökningar har inkommit än...",$scope.dataList=$scope.convertToExcelFormat($scope.applications)}),$scope.dataList=[],$scope.datafields={"data.displayName":"Namn",semesterStudied:"Termin Studerat",semesterNation:"Termin Nation","data.personNumber":"Personnr","data.telephone":"Telefon","data.streetaddress":"Adress","data.zipCode":"Postnr","data.city":"Stad","data.highschool":"Gymnasium","data.bank":"Bank","data.bankaccount":"Bankkonto","data.union":"Kår","data.universitypoints.total":"HP totalt","data.interruption":"Avbrott"},$scope.convertToExcelFormat=function(applications){function search(key,nameKey,myArray){for(var i=0;i<myArray.length;i++)if(myArray[i][key]===nameKey)return myArray[i];return{}}var dataList=[],unipoints=new Set,assignments=new Set,earlierScholorships=new Set;return applications.forEach(function(a){a.data.universitypoints.semesters.forEach(function(s){unipoints.add(s.name)}),a.data.assignments.forEach(function(s){s.semester.split("-").forEach(function(x){assignments.add(x)})}),a.data.earlierScholorships.forEach(function(s){earlierScholorships.add(s.semester)})}),applications.forEach(function(a){unipoints.forEach(function(u){$scope.datafields["data.universitypoints."+u]="Poäng "+u,a.data.universitypoints[u]=search("name",u,a.data.universitypoints.semesters).points}),assignments.forEach(function(u){u.split("-").forEach(function(x){$scope.datafields["data.assignments."+u]="Uppdrag "+u,a.data.assignments[u]=search("semester",x,a.data.assignments).name})}),earlierScholorships.forEach(function(u){$scope.datafields["data.earlierScholorships."+u]="Tidigare stip."+u;var earl=search("semester",u,a.data.earlierScholorships);a.data.earlierScholorships[u]=earl.name+": "+earl.money+"kr"});var inter;a.data.interruption.length>1?inter=a.data.interruption.reduce(function(pre,curr){return pre+", "+curr.when+": "+curr.why}):1===a.data.interruption.length&&(inter=a.data.interruption[0].when+": "+a.data.interruption[0].why),a.data.interruption=inter,dataList.push(a)}),dataList},$scope.propertyName="age",$scope.reverse=!0,$scope.sortBy=function(propertyName){$scope.reverse=null!==propertyName&&$scope.propertyName===propertyName&&!$scope.reverse,$scope.propertyName=propertyName},$scope.removeApplication=function(index){confirm("Är du säker på att du vill radera ansökningen?")&&ApplicationsService.delete({applicationId:$scope.applications[index]._id},function(err){$scope.applications.splice(index,1)})}}angular.module("scholorships").controller("ApplicationsListController",ApplicationsListController),ApplicationsListController.$inject=["ApplicationsService","SemesterService","$scope","$http","$stateParams","dateFilter"]}(),function(){function ScholorshipsListController(ScholorshipsService,dateFilter,$scope){var vm=this;$scope.dateFilter=function(d){return dateFilter(d,"yyyy-MM-dd")},vm.lists=ScholorshipsService.query({},function(data){data&&(vm.activeScholorships=data.filter(function(d){var now=$scope.dateFilter(new Date),start=$scope.dateFilter(d.startDate),end=$scope.dateFilter(d.endDate);return start<=now&&end>=now}),vm.oldScholorships=data.filter(function(d){var now=$scope.dateFilter(new Date),start=$scope.dateFilter(d.startDate),end=$scope.dateFilter(d.endDate);return start<=now&&end<now}),vm.upcomingScholorships=data.filter(function(d){var now=$scope.dateFilter(new Date),start=$scope.dateFilter(d.startDate);$scope.dateFilter(d.endDate);return start>now}),vm.lists=[{list:vm.activeScholorships,title:"Aktiva stipendier"},{list:vm.upcomingScholorships,title:"Kommande stipendier"},{list:vm.oldScholorships,title:"Gamla stipendier"}])})}angular.module("scholorships").controller("ScholorshipsListController",ScholorshipsListController),ScholorshipsListController.$inject=["ScholorshipsService","dateFilter","$scope"]}(),function(){function ScholorshipsController($scope,$sce,$state,Authentication,scholorship,dateFilter){function remove(){confirm("Är du säker på att du vill radera?")&&vm.scholorship.$remove($state.go("scholorships.list"))}function save(isValid){function successCallback(res){$state.go("scholorships.view",{scholorshipId:res._id})}function errorCallback(res){vm.error=res.data.message}if(!(isValid&&dateFilter(vm.scholorship.startDate,"yyyy-MM-dd")<dateFilter(vm.scholorship.endDate,"yyyy-MM-dd")))return $scope.$broadcast("show-errors-check-validity","vm.form.scholorshipForm"),vm.error="Ej giltig input. P.S tänk på att startdatum inte får ske samma dag eller senare än slutdatumet.",!1;vm.scholorship._id?vm.scholorship.$update(successCallback,errorCallback):vm.scholorship.$save(successCallback,errorCallback)}var vm=this;vm.authentication=Authentication,vm.scholorship=scholorship,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.isAdmin=vm.authentication.user.roles&&vm.authentication.user.roles.indexOf("admin")>=0,$scope.startString=dateFilter(vm.scholorship.startDate,"yyyy-MM-dd"),$scope.endString=dateFilter(vm.scholorship.endDate,"yyyy-MM-dd");var s=dateFilter(vm.scholorship.startDate,"yyyy-MM-dd"),e=dateFilter(vm.scholorship.endDate,"yyyy-MM-dd"),now=dateFilter(new Date,"yyyy-MM-dd");$scope.isActive=s<=now&&e>=now,$scope.isOld=s<=now&&e<=now,$scope.isUpcoming=s>now,$scope.$watch("startString",function(dateString){vm.scholorship.startDate=new Date(dateString)}),$scope.$watch("endString",function(dateString){vm.scholorship.endDate=new Date(dateString)}),$scope.htmlDescription=$sce.trustAsHtml(vm.scholorship.description),$scope.addFund=function(){vm.scholorship.funds||(vm.scholorship.funds=[]),vm.scholorship.funds.push({name:"",size:0,description:"",edit:!0})},$scope.saveFund=function(pos,valid){valid&&(vm.scholorship.funds[pos].edit=!1)}}angular.module("scholorships").controller("ScholorshipsController",ScholorshipsController),ScholorshipsController.$inject=["$scope","$sce","$state","Authentication","scholorshipResolve","dateFilter"]}(),function(){angular.module("scholorships").directive("ngJsonExcel",function(){return{restrict:"AE",scope:!0,controller:["$scope","$element",function($scope,$element){function _bodyData(applications){var data=applications,body="";return angular.forEach(data,function(dataItem){var rowItems=[];angular.forEach(fields,function(field){if(field.indexOf(".")){field=field.split(".");var curItem=dataItem;angular.forEach(field,function(prop){null!==curItem&&void 0!==curItem&&(curItem=curItem[prop])}),data=curItem}else data=dataItem[field];var fieldValue=null!==data?data:" ";void 0!==fieldValue&&angular.isObject(fieldValue)&&(fieldValue=_objectToString(fieldValue)),"string"==typeof fieldValue?rowItems.push('"'+fieldValue.replace(/"/g,'""')+'"'):rowItems.push(fieldValue)}),body+=rowItems.join(separator)+"\n"}),body}function _convertToExcel(body){return header.join(separator)+"\n"+body}function _objectToString(object){var output="";return angular.forEach(object,function(value,key){output+=key+":"+value+" "}),'"'+output+'"'}$scope.filename="ansokningar";var fields=[],header=[],separator=$scope.separator||";";$scope.myOnclickFunction=function(myfields,applications){angular.forEach(myfields,function(field,key){if(!field||!key)throw new Error("error json report fields");fields.push(key),header.push(field)});var bodyData=_bodyData(applications),strData=_convertToExcel(bodyData),blob=new Blob([strData],{type:"text/plain;charset=utf-8"});return saveAs(blob,[$scope.filename+".csv"])}}]}})}(),function(){function ApplicationsService($resource){return $resource("api/applications/:applicationId",{applicationId:"@_id"},{update:{method:"PUT"}})}angular.module("scholorships").factory("ApplicationsService",ApplicationsService),ApplicationsService.$inject=["$resource"]}(),function(){function ScholorshipsService($resource){return $resource("api/scholorships/:scholorshipId",{scholorshipId:"@_id"},{update:{method:"PUT"}})}angular.module("scholorships").factory("ScholorshipsService",ScholorshipsService),ScholorshipsService.$inject=["$resource"]}(),function(){function SemesterService(){return{addSemester:function(semesters,addToFront){var arrLength=semesters.length,newSemester="";if(0===arrLength)newSemester=this.getThisSemesterName();else{var lastSemester=addToFront?semesters[0].name:semesters[arrLength-1].name,year=parseInt(lastSemester.substring(2));newSemester="VT"===lastSemester.substring(0,2)?"HT"+(year-!addToFront).toString():"VT"+(year+addToFront).toString()}var obj={name:newSemester,points:0};addToFront?semesters.unshift(obj):semesters.push(obj)},getThisSemesterName:function(){var today=new Date,month=today.getMonth()+1,year=today.getFullYear();return(month<7?"VT":"HT")+(year-2e3).toString()},getLastFourSemesters:function(semesters){for(;semesters.length<4;)this.addSemester(semesters,!1);return semesters}}}angular.module("scholorships").factory("SemesterService",SemesterService)}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Hantera användare",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{
userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.signin=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1;$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1;$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","passwordForm"),!1;$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL="/api/users/picture/"+$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf("|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|")}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL="/api/users/picture/"+$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;new Users($scope.user).$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){return scope.passwordVerify===password})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){return{user:$window.user}}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){return owaspPasswordStrengthTest.test(password)},getPopoverMsg:function(){return"Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters."}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);